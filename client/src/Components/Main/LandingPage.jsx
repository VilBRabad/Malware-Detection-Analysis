import React, { useEffect, useState } from 'react'
import { FaUserCircle, FaCloudUploadAlt } from "react-icons/fa";
import { IoExitOutline, IoCloudOffline } from "react-icons/io5";
import { Link } from 'react-router-dom';
import { useNavigate } from 'react-router-dom';
import BarGraphs from './BarGraphs';
import BarGraph2 from "./BarGraph2"
import BarGraph3 from './BarGraph3';
import BarGraph4 from './BarGraph4';
import PieChart from './PieChart';
import BarGraph5 from './BarGraph5';
import PieChart2 from './PieChart2';


const loadData = ["Loading...",  "Data Cleaning", "Features Extrating", "Data Testing", "Calculating", "Predicting"]

function LandingPage({ setIsLoggedIn }) {
    const navigate = useNavigate();

    let i = 0;
    const [show, setShow] = useState(false);
    const [fileName, setFileName] = useState("Choose File");
    const [isLoading, setIsLoading] = useState(false);
    const [data, setData] = useState(null);
    const [modelResult, setModelResult] = useState(null);
    const [dataFound, setDataFound] = useState(false);
    const [file, setFile] = useState(null);
    const [loadText, setLoadText] = useState("Loading...")

    // values = [total_methods, total_obfuscated_methods, total_malware_methods]



    const inputChange = (e) => {
        var name = e.target.files[0].name;
        setFile(e.target.files[0]);

        if (name.length > 20) {
            const indx = name.lastIndexOf('.');
            const ext = name.slice(indx);
            name = name.slice(0, 20);
            name = name + "..."
            name = name + ext;
        }
        setFileName(name);
    }

    const uploadFile = async () => {
        const formData = new FormData();
        formData.append('file', file);

        try {
            setIsLoading(true);
            const response = await fetch('http://127.0.0.1:5000/upload-file', {
                method: 'POST',
                body: formData,
            });

            const res = await response.json();
            console.log(res);
            setIsLoading(false);
            if (res.status === 500) {
                window.alert("Something went wrong");
            }
            else {
                setData(JSON.parse(res)['model_cal']);
                setModelResult(JSON.parse(res)['model_result']);
                setDataFound(true);
                window.alert("file submited successfully");
            }
        } catch (error) {
            setIsLoading(false);
            window.alert("Server Error");
            console.error('Error:', error);
        }
        finally{
            i=0;
        }
    }

    const logoutClickHandle = async () => {
        try {
            const res = await fetch("http://127.0.0.1:5000/logout", {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: {},
            })

            const res_data = await res.json();
            if (res_data.status === 201) {
                setIsLoggedIn(false);
                navigate("/");
            }
            else {
                throw Error;
            }
        } catch (error) {
            window.alert("server Error!!");
            navigate("/");
        }
    }


    useEffect(() => {
        console.log("Checkpoint: Parent")
        const interval = setInterval(() => {
            setLoadText(loadData[i]);
            i++;
            if (i >= loadData.length) i = 0;
        }, 5000);

        // Clear the interval on component unmount
        return () => clearInterval(interval);
    }, []);

    const labels = data ? Object.keys(data) : null;
    const accuracies = labels?.map(label => data[label].Accuracy);
    const precisions = labels?.map(label => data[label].Precision);
    const recalls = labels?.map(label => data[label].Recall);
    const f1Scores = labels?.map(label => data[label]['F1 Score']);

    const GoToHome = () => {
        setDataFound(false);
    }

    return (
        <div className="container min-h-screen w-screen ">
            <div className="navbar xl:px-12 pt-4 flex justify-between border-b pb-2">
                <Link to="/" className="text-2xl font-bold"><span className="text-red-700">.Malware</span>Det</Link>
                <div className="flex gap-2 font-semibold relative">
                    <span>Hello, </span>
                    <FaUserCircle className="text-3xl cursor-pointer" onClick={() => setShow(!show)} />
                    {
                        show ?
                            <div className="absolute flex items-center top-full h-16 w-full border-2 bg-white" onMouseEnter={() => setShow(true)} onMouseLeave={() => setShow(false)}>
                                <Link to="/" className="logout-btn pl-4 flex gap-4 w-full h-[2.5rem] hover:bg-black/10 items-center justify-centers cursor-pointer">
                                    <button onClick={logoutClickHandle}>Logout</button>
                                    <IoExitOutline className="text-xl" />
                                </Link>
                            </div>
                            :
                            <></>
                    }
                </div>
            </div>
            <div className="h-full">
                <div className={`h-[40%] transition ${!dataFound ? "flex" : "hidden"} flex-col items-center border-b`}>
                    <div className="upload border-2 mt-14 mb-6 h-[8rem] w-[50%] relative flex items-center justify-center">
                        <input type="file" name='file' id='file' className="opacity-0 h-full w-full absolute" onChange={inputChange} />
                        <div className="min-w-[10rem] gap-3 px-3 h-[2.5rem] flex items-center justify-center bg-red-700 text-white font-semibold">
                            <FaCloudUploadAlt className="text-lg" />
                            <label htmlFor="file" className="">{fileName}</label>
                        </div>
                        <span className="absolute top-5 text-7xl z-[-1] font-bold opacity-[0.2]">Drag & Drop</span>
                    </div>
                    <button onClick={uploadFile} className="border-2 mb-4 h-10 w-[10rem] text-lg font-semibold border-red-700 hover:bg-red-700 transition hover:text-white">Upload</button>
                </div>
                <div className={`${!isLoading && data ? "min-h-[92.2vh]" : "h-[50%]"} relative`}>
                    {
                        isLoading ?
                            <div className="h-[20rem] flex flex-col items-center justify-center">
                                <div className="loading-spinner"></div>
                                <span className="mt-2">{loadText}</span>
                            </div>
                            :
                            <>
                                {
                                    data ?
                                        <div className="px-14 min-h-[92.2vh] py-6 px-16 pt-4">
                                            {dataFound ? <button onClick={GoToHome} className="border-2 mb-4 h-10 w-[10rem] text-lg font-semibold border-red-700 hover:bg-red-700 transition hover:text-white">Go Back</button> : <></>}
                                            <h1 className="text-lg font-semibold">Result:</h1>
                                            <div className='w-[40vw] bg-white p-4 drop-shadow-2xl my-4'>
                                                <p className="font-semibold">Accuracies</p>
                                                <p>Deep Learning DNN+RNN : {accuracies[0].toFixed(2)}%</p>
                                                <p>Logistic Regression : {accuracies[1].toFixed(2)}%</p>
                                                <p>Random Forest Classification : {accuracies[2].toFixed(2)}%</p>
                                            </div>
                                            <div className="">
                                                <div className="h-12 w-full flex items-center bg-slate-700 text-white px-4 my-4 drop-shadow-2xl"><span className="text-lg font-semibold">Malware Detection Results</span></div>
                                                <div className="flex gap-6 flex-wrap">
                                                    <div className="w-[40vw]  bg-white p-4 drop-shadow-2xl">
                                                        <PieChart2 sizes={modelResult['malwareDetPer']['sizes']} labels={modelResult['malwareDetPer']['labels']} totalMalwareMethods = {modelResult['Dist']['values'][2]}/>
                                                    </div>  
                                                    <div className="w-[40vw] bg-white p-4 drop-shadow-2xl">
                                                        <PieChart values = {modelResult['Dist']['values']} labels={modelResult['Dist']['labels']}/>
                                                    </div>  
                                                    <div className="w-[40vw] bg-white p-4 drop-shadow-2xl">
                                                        <BarGraph5 categories={modelResult['Dist']['categories']} values={modelResult['Dist']['values']}/>
                                                    </div>
                                                </div>
                                            </div>
                                            <div className="mt-6">
                                                <div className="h-12 w-full flex items-center bg-slate-700 text-white px-4 my-4 drop-shadow-2xl"><span className="text-lg font-semibold">Accurasies, Precisions, Recalls & F1-Score Comparision</span></div>
                                                <div className="flex gap-6 flex-wrap">
                                                    <div className="w-[40vw] bg-white p-4 drop-shadow-2xl">
                                                        <BarGraphs accuracies={accuracies} labels={labels} />
                                                    </div>  
                                                    <div className="w-[40vw] bg-white p-4 drop-shadow-2xl">
                                                        <BarGraph2 precisions={precisions} labels={labels} />
                                                    </div>
                                                    <div className="w-[40vw] bg-white p-4 drop-shadow-2xl">
                                                        <BarGraph3 recalls={recalls} labels={labels} />
                                                    </div>
                                                    <div className="w-[40vw] bg-white p-4 drop-shadow-2xl">
                                                        <BarGraph4 f1Scores={f1Scores} labels={labels} />
                                                    </div>
                                                </div>
                                            </div>

                                            <div className="others">
                                                <div className="h-12 w-full flex items-center bg-slate-700 text-white px-4 my-4 drop-shadow-2xl"><span className="text-lg font-semibold">Others</span></div>
                                                <span>Comming soon....</span>
                                            </div>
                                           
                                        </div>
                                        :
                                        <div className="h-[20rem] flex flex-col items-center justify-center">
                                            <IoCloudOffline className="text-[8rem] opacity-[0.5]" />
                                            <span>Please Select File</span>
                                        </div>
                                }
                            </>
                    }
                </div>
            </div>
        </div>
    )
}

export default LandingPage
