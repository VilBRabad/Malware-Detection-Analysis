import numpy as np # linear algebra
import pandas as pd
from sklearn.model_selection import train_test_split
import xgboost as xgb
from sklearn.manifold import TSNE
from sklearn.preprocessing import StandardScaler


original_df = pd.read_csv('Obfuscated-MalMem2022.csv', sep=',', encoding='utf-8')
original_df.shape

df = original_df.copy()
df.shape

def select_every_nth_row(df, n=1000):
    selected_rows = df.iloc[::n]
    return selected_rows

selected_rows = select_every_nth_row(df, n=1000)

columns_to_drop = ['pslist.nprocs64bit', 'handles.nport', 'svcscan.interactive_process_services']

# Drop the specified columns
df.drop(columns=columns_to_drop, inplace=True)

df.fillna(method="ffill", inplace=True)  # Forward fill missing values
df.drop_duplicates(inplace=True)

df["Class"] = df["Class"].astype("category")

df = pd.get_dummies(df, columns=["Class"], drop_first=True)


# Separate features and target
y = df["Class_Malware"]
X = df.drop(columns=["Category", "Class_Malware"])

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)


# Feature extraction using t-SNE
tsne = TSNE(n_components=2, perplexity=30, n_iter=300)
X_tsne = tsne.fit_transform(X_scaled)


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=7)
# print(X_test)
# XGBoost for Feature Extraction
xgb_model = xgb.XGBClassifier()
xgb_model.fit(X_train, y_train)

# Use the trained XGBoost model to get feature importances
feature_importances = xgb_model.feature_importances_

# Select the top N important features
N = 14  # Change this value based on the number of features you want to select
selected_feature_indices = np.argsort(feature_importances)[::-1][:N]
selected_features = X.columns[selected_feature_indices]

# Subset the dataset with the selected features
X_train_selected = X_train.iloc[:, selected_feature_indices]
X_test_selected = X_test.iloc[:, selected_feature_indices]

# Normalize the data
scaler = StandardScaler()
X_train_selected = scaler.fit_transform(X_train_selected)
X_test_selected = scaler.transform(X_test_selected)
