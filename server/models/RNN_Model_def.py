import torch
import torch.nn as nn

class MalwareDetector(nn.Module):
    def __init__(self, input_size, hidden_size, output_size):
        super(MalwareDetector, self).__init__()
        self.fc1 = nn.Linear(input_size, hidden_size)
        self.fc2 = nn.Linear(hidden_size, hidden_size)
        self.rnn = nn.RNN(hidden_size, hidden_size, batch_first=True)
        self.fc3 = nn.Linear(hidden_size, output_size)

    def forward(self, x):
        x = x.unsqueeze(1)  # Add a time step dimension
        out = torch.relu(self.fc1(x))
        out = torch.relu(self.fc2(out))
        out, _ = self.rnn(out)
        out = self.fc3(out[:, -1, :])  # Get the last output of the RNN
        return out

